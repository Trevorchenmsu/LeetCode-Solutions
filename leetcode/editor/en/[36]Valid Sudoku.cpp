//Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be v
//alidated according to the following rules: 
//
// 
// Each row must contain the digits 1-9 without repetition. 
// Each column must contain the digits 1-9 without repetition. 
// Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 with
//out repetition. 
// 
//
// Note: 
//
// 
// A Sudoku board (partially filled) could be valid but is not necessarily solva
//ble. 
// Only the filled cells need to be validated according to the mentioned rules. 
//
// 
//
// 
// Example 1: 
//
// 
//Input: board = 
//[["5","3",".",".","7",".",".",".","."]
//,["6",".",".","1","9","5",".",".","."]
//,[".","9","8",".",".",".",".","6","."]
//,["8",".",".",".","6",".",".",".","3"]
//,["4",".",".","8",".","3",".",".","1"]
//,["7",".",".",".","2",".",".",".","6"]
//,[".","6",".",".",".",".","2","8","."]
//,[".",".",".","4","1","9",".",".","5"]
//,[".",".",".",".","8",".",".","7","9"]]
//Output: true
// 
//
// Example 2: 
//
// 
//Input: board = 
//[["8","3",".",".","7",".",".",".","."]
//,["6",".",".","1","9","5",".",".","."]
//,[".","9","8",".",".",".",".","6","."]
//,["8",".",".",".","6",".",".",".","3"]
//,["4",".",".","8",".","3",".",".","1"]
//,["7",".",".",".","2",".",".",".","6"]
//,[".","6",".",".",".",".","2","8","."]
//,[".",".",".","4","1","9",".",".","5"]
//,[".",".",".",".","8",".",".","7","9"]]
//Output: false
//Explanation: Same as Example 1, except with the 5 in the top left corner being
// modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is inval
//id.
// 
//
// 
// Constraints: 
//
// 
// board.length == 9 
// board[i].length == 9 
// board[i][j] is a digit 1-9 or '.'. 
// 
// Related Topics Array Hash Table Matrix 
// üëç 3583 üëé 623


//leetcode submit region begin(Prohibit modification and deletion)
/*
 * solution: brute force
 * time: O(1)
 * space: O(1)
 * */
class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        vector<vector<int>> row(9, vector<int> (9));
        vector<vector<int>> col(9, vector<int> (9));
        vector<vector<int>> box(9, vector<int> (9));

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    continue;
                }

                int num = board[i][j] - '1';
                /*
                boxÂùêÊ†áËÆ°ÁÆóÔºöÊääÊï¥‰∏™Áü©ÈòµÁúãÊàêÊòØ9‰∏™boxÔºåÊâÄ‰ª•ÊúâËßíÊ†á0-8ÔºåboxÁöÑÁ¨¨‰∏ÄÁª¥Âç≥‰∏∫Ëøô‰∏™boxÁöÑËßíÊ†áÔºåÊàë‰ª¨Ê†πÊçÆiÂíåjÁöÑÂÖ∑‰Ωì
                ÊÉÖÂÜµÔºåÂ∞ÜÂÖ∂ËΩ¨Âåñ‰∏∫boxËßíÊ†áÔºåÂ¶Çi=2Ôºåj=2Â±û‰∫éÁ¨¨‰∏Ä‰∏™boxÁöÑÂè≥‰∏ãËßíÂÖÉÁ¥†Ôºå2/3+2/3 * 3=0ÔºåÂç≥Á¨¨‰∏Ä‰∏™boxËßíÊ†á‰∏∫0Ôºõ
                Âèà‰æãÂ¶Çi=8Ôºåj=8ÔºåË°®Á§∫Á¨¨‰πù‰∏™boxÔºåÊúÄÂè≥‰∏ãËßíÁöÑ‰ΩçÁΩÆÔºå8/3+8/3*3=2+6=8ÔºåÂç≥Á¨¨‰πù‰∏™boxËßíÊ†á‰∏∫8„ÄÇÈÄöËøá‰∏§‰∏™‰æãÂ≠êÂàÜÊûê
                ÂèØ‰ª•Áü•ÈÅìj/3+(i/3)*3ËÆ°ÁÆóÂá∫Êù•ÁöÑÁªìÊûúÂ∞±ÊòØboxËßíÊ†á„ÄÇÈÇ£‰πàboxÁ¨¨‰∫åÁª¥Ë°®Á§∫‰ªÄ‰πàÔºüÂèØ‰ª•ÁúãÂà∞boxÁ¨¨‰∫åÁª¥ÈïøÂ∫¶Áª¥9ÔºåÂÆûÈôÖ‰∏ä
                Â∞±ÊòØÊääboxÊãâÂπ≥Êàê‰∏Ä‰∏™ÈïøÂ∫¶‰∏∫9ÁöÑÂêëÈáèÔºå‰∏çÁî®ÂÖ∑‰ΩìÁÆ°boxÈáåÈù¢ÂÖÉÁ¥†ÁöÑ‰ΩçÁΩÆÔºåÂè™Ë¶ÅboxÂá∫Áé∞‰∏Ä‰∏™Êï∞Â≠óÔºå‰æãÂ¶Ç9ÔºåËßíÊ†á‰∏∫8ÁöÑ‰ΩçÁΩÆ
                Â∞±‰ºöËµã‰∫à1„ÄÇÂΩìboxÈáåÈù¢ÂÖ∂ÂÆÉ‰ΩçÁΩÆÁöÑÂÖÉÁ¥†‰πü‰∏∫9Êó∂ÔºåÂ∞±‰ºöÂèëÁé∞Â∑≤ÁªèËµãÂÄºËøáÔºåÊâÄ‰ª•ÂèØ‰ª•Á°ÆÂÆöÂá∫Áé∞ÈáçÂ§çÂÖÉÁ¥†ÔºåËøîÂõûfalse„ÄÇ
                */
                if (row[i][num] || col[num][j] || box[j/3 + (i/3)*3][num]) {
                    return false;
                }
                row[i][num] = 1;
                col[num][j] = 1;
                box[j/3 + (i/3)*3][num] = 1;
            }
        }

        return true;
    }
};
//leetcode submit region end(Prohibit modification and deletion)
